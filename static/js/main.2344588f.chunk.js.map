{"version":3,"sources":["Auth.js","Tweet.js","App.js","serviceWorker.js","Config.js","index.js"],"names":["Auth","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","email","password","username","errorMessage","event","field","target","name","value","changes","setState","_this2","firebase","auth","createUserWithEmailAndPassword","then","currentUser","updateProfile","displayName","user","catch","err","message","_this3","signInWithEmailAndPassword","_this4","signOut","_this5","errorDiv","react_default","a","createElement","className","onChange","handleChange","type","onClick","handleSignUp","handleSignIn","handleSignOut","Component","Tweet","formattedDate","Date","info","timestamp","toLocaleTimeString","text","update","likes","App","tweets","tweetText","onAuthStateChanged","tweetsRef","database","ref","console","log","on","snapshot","val","tweet","ServerValue","TIMESTAMP","push","tweetId","child","transaction","d","sortedKeys","keys","sort","b","src_Auth","e","sendTweet","map","src_Tweet","id","key","updateLikes","Boolean","window","location","hostname","match","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","initializeApp","Config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2344588f.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\n// Authentication component\nclass Auth extends Component {\n    // Set initial state in constructor\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: '',\n            password: '',\n            username: '',\n            errorMessage: ''\n        };\n    }\n\n    // Method for handling changes to forms\n    handleChange(event) {\n        let field = event.target.name; // which input\n        let value = event.target.value; // what value\n\n        let changes = {}; // object to hold changes\n        changes[field] = value; // change this field\n        this.setState(changes); // update state\n    }\n    // Method for handling someone signing up \n    handleSignUp() {\n\n        // Create a new user and save their information\n        firebase.auth().createUserWithEmailAndPassword(this.state.email, this.state.password)\n            .then(() => {\n                // Update the display name of the user\n                let profilePromise = firebase.auth().currentUser.updateProfile({\n                    displayName: this.state.username\n                });\n\n                // Return promise for chaining\n                return profilePromise;\n            })\n            .then(() => {\n                // Set the state as the current (firebase) user\n                this.setState({\n                    user: firebase.auth().currentUser,\n                    username: ''\n                });\n            })\n            .catch((err) => {\n                this.setState({ errorMessage: err.message });\n            });\n    }\n\n    // Method for handling someone signing in\n    handleSignIn() {\n        // Sign in the user \n        firebase.auth().signInWithEmailAndPassword(this.state.email, this.state.password)\n            .catch((err) => {\n                this.setState({ errorMessage: err.message });\n            });\n    }\n\n    // Method for handling someone signing out\n    handleSignOut() {\n        // Sign out the user -- this will trigger the onAuthStateChanged() method\n        firebase.auth().signOut()\n            .catch((err) => {\n                this.setState({ errorMessage: err.message });\n            });\n    }\n\n\n    render() {\n        let errorDiv = this.state.errorMessage === \"\" ? \"\" : <div className=\"alert alert-danger\">Error: {this.state.errorMessage}</div>\n        return (\n            <div className=\"container\">\n                {errorDiv}\n                <div className=\"form-group\">\n                    <label>Email:</label>\n                    <input className=\"form-control\"\n                        name=\"email\"\n                        value={this.state.email}\n                        onChange={(event) => { this.handleChange(event) }}\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Password:</label>\n                    <input type=\"password\" className=\"form-control\"\n                        name=\"password\"\n                        value={this.state.password}\n                        onChange={(event) => { this.handleChange(event) }}\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <label>Username:</label>\n                    <input className=\"form-control\"\n                        name=\"username\"\n                        value={this.state.username}\n                        onChange={(event) => { this.handleChange(event) }}\n                    />\n                </div>\n\n                <div className=\"form-group\">\n                    <button className=\"btn btn-primary mr-2\" onClick={() => this.handleSignUp()}>\n                        Sign Up\n                     </button>\n                    <button className=\"btn btn-success mr-2\" onClick={() => this.handleSignIn()}>\n                        Sign In\n                    </button>\n                    <button className=\"btn btn-danger mr-2\" onClick={() => this.handleSignOut()}>\n                        Sign Out\n                    </button>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Auth;","import React from 'react';\nimport './Tweet.css';\n\n// Create a functional component to return the HTMl that looks like a tweet\nfunction Tweet(props) {\n    // Format date\n    let date = new Date(props.info.timestamp);\n    let formattedDate = date.toLocaleTimeString();\n\n    return (\n        <div className=\"tweet\">\n            <div><strong>{props.info.user + \" \"}</strong><span className=\"date\">{formattedDate}</span></div>\n            <div className=\"tweetText\">{props.info.text}</div>\n            <div onClick={() => props.update()} className=\"likes\">Likes: {props.info.likes}</div>\n        </div>\n    )\n    /* Return a div that contains the following information:\n        - A div that has the user name (in bold) and the formatted date (use the className \"date\")\n        - A div that has the text (use className \"tweetText\")\n        - A div that has the number of likes (with className \"likes\"). On click, this should do the update function\n    */\n\n    return (\n        <div className=\"tweet\">\n\n        </div>\n    )\n}\n\nexport default Tweet;","import React, { Component } from 'react';\nimport Auth from './Auth';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\nimport Tweet from './Tweet';\nimport \"./App.css\";\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            user: null,\n            tweets: {},\n            tweetText: ''\n        };\n    }\n\n    // Begin listening to authentication *and* database on Mount()\n    componentDidMount() {\n        // Listen to state authentication state change\n        firebase.auth().onAuthStateChanged((user) => {\n            // If there is a user, set the state of `user`\n            if (user) {\n                this.setState({\n                    user: user\n                });\n            } else {\n                this.setState({ user: null });\n            }\n        });\n\n        // Create a reference to the \"tweets\" reference on the database\n        this.tweetsRef = firebase.database().ref(\"tweets\");\n        console.log(this.tweetsRef)\n\n        // When the \"tweets\" *value* changes, update the state appropriately (`tweets`)\n        this.tweetsRef.on(\"value\", (snapshot) => {\n            let tweets = snapshot.val();\n            this.setState({tweets:tweets})\n        });\n\n\n    }\n\n    // Method to push tweet to the firebase database\n    sendTweet() {\n        console.log('send tweet')\n        // Construct `tweet` object to push to firebase\n        // Include the user's displayName, the text, number of likes (0), and a timestamp\n        let tweet = {\n            user:firebase.auth().currentUser.displayName,\n            text:this.state.tweetText, \n            likes:0, \n            timestamp: firebase.database.ServerValue.TIMESTAMP\n        }\n\n\n        // Push the tweet to the database\n        this.tweetsRef.push(tweet);\n\n    }\n\n    // Method for updating the likes on a tweet\n    updateLikes(tweetId) {\n        // Create a reference to the number of likes\n        let likes = this.tweetsRef.child(tweetId + \"/likes\");\n\n        // Issue a transaction on the number of likes to increase it by 1\n        likes.transaction((d) => d + 1);\n\n    }\n\n    render() {\n        console.log(this.state.tweets)\n        // Sort the keys of the tweets in descending order (by timestamp)\n        let sortedKeys = Object.keys(this.state.tweets).sort((a, b) => {\n            return this.state.tweets[b].timestamp - this.state.tweets[a].timestamp\n        });\n\n        return (\n            <div className=\"App\">\n                {/* Only display the auth if there is *not* a user */\n                    !this.state.user && <Auth />}\n                {/* Only display the twitter content if there *is* a user */\n                    this.state.user &&\n                    <div className=\"container\">\n                        Welcome, {this.state.user.displayName}!\n                        <div>\n                            {/* Create an input that holds (and updates) the state of tweetText*/}\n                            <input \n                                value={this.state.tweetText}\n                                className=\"form-control\"\n                                onChange={(e) => this.setState({tweetText:e.target.value})}\n                            />\n\n                            {/* Create a button that, on click, executes the sendTweet() method*/}\n                            <button \n                                className=\"btn btn-primary\"\n                                onClick={() => this.sendTweet()}>Tweet</button>\n\n                        </div>\n                        <div className=\"tweetContainer\">\n                            {\n                                /* For each key in sortedKeys, return a <Tweet />\n                                    - Make sure to pass in the tweet info, id, and an update() method\n                                */\n                               sortedKeys.map((d) => {\n                                   return <Tweet \n                                    id={d} \n                                    info={this.state.tweets[d]}\n                                    key={d}\n                                    update = {() => this.updateLikes(d)}\n                                    />\n                               })\n                            }\n                        </div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const config = {\n    apiKey: \"AIzaSyBXDo-4vXXq1GYjIDOjwDlwDqCG2tU88Vw\",\n    authDomain: \"db-in-class.firebaseapp.com\",\n    databaseURL: \"https://db-in-class.firebaseio.com\",\n    projectId: \"db-in-class\",\n    storageBucket: \"\",\n    messagingSenderId: \"1034049721454\"\n  };\n\nexport default config;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport firebase from 'firebase/app';\nimport Config from \"./Config\";\n\nfirebase.initializeApp(Config);\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}